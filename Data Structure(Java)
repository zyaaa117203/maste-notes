基本定义
数据结构是计算机存储，组织数据的方式，指相互之间具有一种或多种特定关系的数据元素的集合。

基本数据结构分类
数组，栈，队列，链表，树，图，堆，散列表。。。

集中数据结构中数据之间的关系
    集合      集合是代表着一组元素  各元素之间除了同属于一个集合之外，不存在其他关系.
    线性结构  存在1对1的关系
    树形结构  存在1对n的关系
    图形结构  存在n对n的关系
    
简单介绍

    数组    数组是在内存中开辟的一片"连续（continuous）"的空间，元素就是存在这些空间里。一个容量为10的数组其实就像是一个有10个房间的宾馆，
            这些房间从0000到0009排号，房间号是固定的，所以我们可以根据房间号找到对应的租客。
           
           特点:  元素固定，要求物理空间连续
                  增删慢：每次增删，都要将指定位置之后的元素整段移动
                  查询速度快：因其长度固定且空间连续，每个空间都有特定的index指向内存地址，我们可以通过index快速查询数据
                  
     栈    Jaca中的Stack底层是使用LinkedList实现的。栈就像是我们以前用过的一种塑料存储硬币的圆柱形容器，因其直径只能容纳一个硬币，所以我们
           需要一个一个存储，先进去的会被压到下面（压栈），当容器存满时，我们从最上方开始取硬币，也就是从最后一个进入容器的硬币开始取出。
           
           特点：  线性结构，后进先出LIFO
                   插入和删除都是在栈顶(入口)进行
     
     队列  底层实现:LinkedList。queue like a one-way pipe.因为只有一个入口一个出口，所以只能顺序的从一端进入从另一端出去。
           
           特点:   线行结构，先进先出FIFO
                   队头(出口)删除，队尾(入口)插入
                  
     链表  链表结构并不要求物理空间连续，其数据元素的逻辑顺序是通过链表中的指针连接顺序实现的，1结点保存的指针指向2节点的内存地址，2指向3，从而
           保证逻辑上连续。比如A和B的家之间隔着很多房子，A知道B家的地址，C现在要找B却不知道地址，但是他知道A的地址,找到A也就能找到B了。       
           
           特点:    大小不固定，不要求物理空间连续，但是要求逻辑上连续。
                    因为不连续性，所以查询速度较数组慢，需要通过指针一个个找到结点（遍历整个链表）再查询结点中的数据。
                    插入删除快，插入删除时不需要整段移动，只需要申请一片新空间，然后update下指定位置节点的连接关系就行了
                    
     双向链表  单链表的每个节点只需要存储自己的信息和后继节点的内存地址就行了，双向链表还保存了前驱节点的内存地址
     循环链表，尾结点保存了头结点的内存地址
     
     二叉树
     二叉树是每个结点至多有2个子结点的树，树的遍历其实是将二叉树的各个节点转换成一个线性序列来表示
     遍历方式： 前序遍历    根-->左-->右
               中序遍历    左-->根-->右
               后序遍历    左-->右-->根
               按层次遍历  横向一层层遍历
     
     散列表
     又叫哈希表，像在HashMap中，key-value叫做关键码值，我们查找元素时，会调用散列函数，会将关键码映射到散列表中的某个访问位置，
     从而提高访问速度
     比如每个人都有不同的特征，获得这些特征的方法就是散列函数，而一堆特征就是哈希表。HashMap会在底层会创建数组来存储数据，每个数据
     都会有自己的hash值,然后根据Hash算法对hash值进行运算，得到其存储在数组的位置，如果两个元素拥有相同的hash值，那么会存在相同的位置，
     这时候就会形成一个链表。
                   
           
                  
            
           
