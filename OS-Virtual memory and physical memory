两种内存管理机制

第一种内存管理:
1.每个进程都有自己独立的内存空间(虚拟内存)
2.当一个新进程建立的时候，会在进程控制表中的task_struct中记录中一条链表，用于记录中内存空间的分配情况，哪些地址有数据，
哪些地址无数据，哪些可读，哪些可写，都可以通过这个链表记录。
3.每个进程已经分配的内存空间，都与对应的磁盘空间映射。
这种内存管理存在的问题：建立一个线程就要将程序文件放到内存空间中去，一个程序如果对应多个进程，会造成大量的资源浪费

分页内存管理:
        原理：将虚拟内存空间和物理内存空间皆划分为大小相同的页面，如4KB、8KB或16KB等，并以页面作为内存空间的最小分配单位，
        一个程序的一个页面可以存放在任意一个物理页面里。
        
        1.每个进程的内存空间只是虚拟内存空间，每次访问内存空间的某个地址，都需要把地址翻译为实际物理内存地址
        2.所有进程共享同一物理内存，每个进程只把自己目前需要的虚拟内存空间映射并存储到物理内存上。
        3.进程要知道哪些内存地址上的数据在物理内存上，哪些不在，还有在物理内存上的哪里，需要用页表来记录
        4.页表的每一个表项分两部分，第一部分记录此页是否在物理内存上，第二部分记录物理内存页的地址（如果在的话）
        5.当进程访问某个虚拟地址，根据页表有效位判断此页是否在物理内存里，0不在，1存在。如果不在,则进行缺页中断，
        把进程需要的数据从磁盘上拷贝到物理内存中，如果内存已经满了，没有空地方了，那就找一个页覆盖，当然如果被覆盖的页曾经被修改过，
        需要将此页写回磁盘，保证数据不丢失
解决的问题：
        1.解决了会产生大量外部碎片造成资源浪费的问题
        2.不用一次性将程序需要的资源一次性加载到进程缓存中，只需要加载必须的页，用不到的页可以放到磁盘中。
        3.当需要扩容时，是需要给程序分配一个新的页就可以了，不用再将资源倒出再倒入
        4.不同的进程执行相同的程序时，虚拟地址可以指向同一个物理地址，同一份资源在内存或磁盘中只要保存1份 
        5.在程序需要分配连续的内存空间的时候，只需要在虚拟内存空间分配连续空间，而不需要实际物理内存的连续空间，可以利用碎片。
        
几个概念
存储器映射： 虚拟内存和磁盘文件之间的映射
页表         页表是一种数据结构，它用于计算机操作系统中的虚拟内存系统，其存储了虚拟地址到物理地址间的映射。虚拟地址在访问进程中是唯一的，
             而物理地址在硬件（比如内存）中是唯一的。
磁盘:        存储信息的媒介
物理内存：    磁盘中的信息需要读取到物理内存才能被处理，实际上是通过内存条获得内存
物理地址:     硬件内存中字节单元的唯一标记
虚拟内存:     进程自身开辟的内存
虚拟地址：    虚拟地址的构成
             在分页系统下，一个程序发出的虚拟地址由两部分组成：页面号和页内偏移值。
             e.g.对于32位寻址的系统，如果页面大小为4KB，则页面号占20位，页内偏移值占12位。

地址翻译：虚拟地址→物理地址
         分页系统的核心是页面的翻译，即从虚拟页面到物理页面的映射（Mapping）。该翻译过程如下伪代码所示：
        
        if(虚拟页面非法、不在内存中或被保护)
           {
               陷入到操作系统错误服务程序
           }
         else
         {
             将虚拟页面号转换为物理页面号
             根据物理页面号产生最终物理地址
          }
        
