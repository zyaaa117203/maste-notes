ways of output log by Log FrameWork 
  1.add suffix(e.g.timestamp,number,pid...)
  2.only one log file and the newst file will ovrride the old file.

notices:
应该提供globs方式的通配符或者正则
判断文件状态(是否新建，有无更新)
如何保存文件的读取进度
如果在读取文件时，文件被删除了该如何处理
我们在读取文件时，进程挂了，读取进度如何保存
在保存文件时进程挂了，如何恢复保存文件进度
如何保证读取的内容不重复
如果日志文件很快生成又很快被删除覆盖，如何保证日志数据不丢失
文件系统的inode会被回收利用，如何处理这个
如何控制读进内存的数据的大小，防止占用过多的内存

Logstash实现机制，以及解决的问题
logstash input conf example:
    input {
        file {
            path => "/xxx/xxx.log.*"
            exclude => "*.xx"
            start_position => "beginning"
            sincedb_path => "xxxx/.sincedb*"
            ignore_older => 0
    }
}

提供了globs方式的模式匹配
从上述从file读取log的例子中，我们可以看到，logstash可以通过path(Array)指定文件路径,通过exclude(Array)排除不需要的文件，这两个参数都支持
globs风格的匹配(globs模式通过通配符来匹配文件名，支持两个通用的通配符:*,?以及[]指定的字符范围)

利用inode(索引结点)来识别新文件
sincedb_path用于指定 sincedb文件生成的目录，文件读取的进度就是保存在这个文件里
e.g.sincedb_xxxxxxxxxxxxxxx,后面的参数就是文件path的hash值，用来保存不同的文件读取进度
文件内容: inode,major number,minor number,pos(e.g.9874568 0 2017 11896578)
inode代表文件的inodeId,相当于文件的唯一标识，major number和minor相当于设备参数(https://translate.google.com/#en/zh-CN/Device%20names%2C%20device%20nodes%2C%20and%20major%2Fminor%20numbers%0AThe%20Linux%20kernel%20represents%20character%20and%20block%20devices%20as%20pairs%20of%20numbers%20%3Cmajor%3E%3A%3Cminor%3E.%0ASome%20major%20numbers%20are%20reserved%20for%20particular%20device%20drivers.%20Other%20major%20numbers%20are%20dynamically%20assigned%20to%20a%20device%20driver%20when%20Linux%20boots.%20For%20example%2C%20major%20number%2094%20is%20always%20the%20major%20number%20for%20DASD%20devices%20while%20the%20device%20driver%20for%20channel-attached%20tape%20devices%20has%20no%20fixed%20major%20number.%20A%20major%20number%20can%20also%20be%20shared%20by%20multiple%20device%20drivers.%20See%20%2Fproc%2Fdevices%20to%20find%20out%20how%20major%20numbers%20are%20assigned%20on%20a%20running%20Linux%20instance.%0AThe%20device%20driver%20uses%20the%20minor%20number%20%3Cminor%3E%20to%20distinguish%20individual%20physical%20or%20logical%20devices.%20For%20example%2C%20the%20DASD%20device%20driver%20assigns%20four%20minor%20numbers%20to%20each%20DASD%3A%20one%20to%20the%20DASD%20as%20a%20whole%20and%20the%20other%20three%20for%20up%20to%20three%20partitions.%0ADevice%20drivers%20assign%20device%20names%20to%20their%20devices%2C%20according%20to%20a%20device%20driver-specific%20naming%20scheme.%20Each%20device%20name%20is%20associated%20with%20a%20minor%20number)
一般驱动设备只需要分配minor number就可以，一些特殊的驱动设备则需要分配major number.
logstash默认每15s读取一次文件检查是否有新log，可以通过stat_interval以及discovery_interval设置这个时间(以S为单位)

利用inode的第三点特殊作用处理inode被回收问题
当文件名被rm时，logstash仍保持对该inodeId的引用,而新的同名文件则会被分配一个新的inodeId.所以当日志文件被删除时，仍可以继续完成日志的读取

我们可以设置每次读取数据的最多字节，防止占用过多的内存，每5S判断一下是否需要保存新的pos.

利用rename函数原子性的保存sincedb,因为日志文件被删除的话，sincedb文件也会被删除。当读取到新内容时，pos会增加，保存新的pos到sincedb.logstash
会创建一个临时文件，写入新内容，然后调用系统的rename函数原子性的替换原来的sincedb文件.

logstash并不能保证数据不重复，不丢失

扩展：
linux中的inode:
磁盘的最小存储单位叫做扇区(0.5kb),8个扇区构成一个块(4kb)，存取文件的最小单位就是块，所有文件都存储在块中，当然也需要开辟一个额外的空间
来存储文件的metedata，这片区域就叫做inode

inode内容：
　　* 文件的字节数
　　* 文件拥有者的User ID
　　* 文件的Group ID
　　* 文件的读、写、执行权限
　　* 文件的时间戳，共有三个：ctime指inode上一次变动的时间，mtime指文件内容上一次变动的时间，atime指文件上一次打开的时间。
　　* 链接数，即有多少文件名指向这个inode
　　* 文件数据block的位置
  
 stat filename（查看索引节点信息）
 
inode的大小：
硬盘格式化时，操作系统自动将硬盘分成两个区域。一个是数据区，存放文件数据；另一个是inode区（inode table），存放inode所包含的信息。
每个inode节点的大小，一般是128字节或256字节。inode节点的总数，在格式化时就给定，一般是每1KB或每2KB就设置一个inode。假定在一块1GB的硬盘中，
每个inode节点的大小为128字节，每1KB就设置一个inode，那么inode table的大小就会达到128MB，占整块硬盘的12.8%。

查看每个硬盘分区的inode总数和已经使用的数量，可以使用df命令。
df -i
查看每个inode节点的大小，可以用如下命令：
sudo dumpe2fs -h /dev/hda | grep "Inode size"

注意：由于每个文件都必须有一个inode，因此有可能发生inode已经用光，但是硬盘还未存满的情况。这时，就无法在硬盘上创建新文件。

inodeId(unique):用于识别文件,filename只是相当于文件的别名。
读取文件的过程:根据文件名找到inodeId然后通过inodeId定位到block读取文件数据

ls -i filename(显示inodeId)

inode的特殊作用
由于inode号码与文件名分离，这种机制导致了一些Unix/Linux系统特有的现象。
　　1. 如果文件名包含特殊字符，无法正常删除。这时，直接删除inode节点，就能起到删除文件的作用。
　　2. 移动文件或重命名文件，只是改变文件名，不影响inode号码。
　　3. 打开一个文件以后，系统就以inode号码来识别这个文件，不再考虑文件名。因此，通常来说，系统无法从inode号码得知文件名。
      第3点使得软件更新变得简单，可以在不关闭软件的情况下进行更新，不需要重启。因为系统通过inode号码，识别运行中的文件，不通过文件名。
      更新的时候，新版文件以同样的文件名，生成一个新的inode，不会影响到运行中的文件。等到下一次运行这个软件的时候，文件名就自动指向新版文件，
      旧版文件的inode则被回收。
      
实际问题
在一台Linux服务器（内存、硬盘比较小）的/data分区内创建文件时，系统提示磁盘空间不足，用df -h命令查看了一下磁盘使用情况，
发现/data分区只使用了66%，还有12G的剩余空间，按理说不会出现这种问题。 后来用df -i查看了一下/data分区的索引节点(inode)，
发现已经用满(IUsed=100%)，导致系统无法创建新目录和文件。 
原因：
　　/data/cache目录中存在数量非常多的小字节缓存文件，占用的Block不多，但是占用了大量的inode。 
解决方案：
　　1、删除/data/cache目录中的部分文件，释放出/data分区的一部分inode。
　　2、用软连接将空闲分区/opt中的newcache目录连接到/data/cache，使用/opt分区的inode来缓解/data分区inode不足的问题：
　　ln -s /opt/newcache /data/cache 
  

linux中的硬链接与软链接
linux一般是一个文件名指向一个inodeId,但是其允许多个文件名指向一个inodeId,这就是硬链接。当删除一个文件名时，不会影响其他文件名的访问，但是如果修改
文件内容，会影响所有文件名的访问。
ln sourcefile targetfile（建立硬连接）
其实硬链接机制java gc中的引用计数法，在inode中保存着一个链接数，记录着指向该inode的文件名总数，当链接数为0时，系统就会回收inode以及block.

软链接
文件1和2指向的inode不一样，但是文件1的内容是2的路径，读取1时，系统会将访问导向文件2，所以最终访问的都是2指向的文件，相当于快捷方式，其指向的是
文件名而不是inde.






